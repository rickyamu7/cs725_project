# -*- coding: utf-8 -*-
"""CS626 Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMn1bsNuVroZuAW1lciPmNd0kg4fNEvo
"""

#Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

#Importing necessary libraries
import polars as pl
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.linear_model import RidgeClassifierCV
from sklearn.metrics import precision_recall_fscore_support

#Preprocessing
def a(df):
  a.counter += 1
  df = df.with_columns(w = pl.col("fault_code") + pl.col("segment_num"))
  df = df.drop(['fault_code', 'segment_num'])
  df = df.rename({i : str(a.counter) + i for i in df.columns if i != 'w'})
  return df
a.counter = 0

#Reading the data
ax = a(pl.read_ipc('/content/drive/MyDrive/FML_data/ax.feather')[1:])
ay = a(pl.read_ipc('/content/drive/MyDrive/FML_data/ay.feather')[1:])
az = a(pl.read_ipc('/content/drive/MyDrive/FML_data/az.feather')[1:])
gx = a(pl.read_ipc('/content/drive/MyDrive/FML_data/gx.feather')[1:])
gy = a(pl.read_ipc('/content/drive/MyDrive/FML_data/gy.feather')[1:])
gz = a(pl.read_ipc('/content/drive/MyDrive/FML_data/gz.feather')[1:])

#Merging into a single dataframe
df = ax.join(ay, on = 'w').join(az, on = 'w').join(gx, on = 'w').join(gy, on = 'w').join(gz, on = 'w')

#Isolating Fault D in the dataset
a = df['w'].to_list()
fault = [j[7] for j in a]
df = df.with_columns(pl.Series("fault", fault))
df = df.drop(['w'])

#Splitting the data into training and test set
df_train = df[[a.index(i) for i in a if i[-8] != '0']]
df_test = df[[a.index(i) for i in a if i[-8] == '0']]

#Fitting a model to detect type of fault
trainx = df_train.drop('fault')
testx = df_test.drop('fault')

trainy = df_train['fault']
testy = df_test['fault']

model = RidgeClassifierCV(alphas = np.logspace(-3, 3, 10), class_weight = 'balanced')
model.fit(trainx, trainy)
predictions = model.predict(testx)

#Results
p, r, f, s = precision_recall_fscore_support(testy, predictions, average = 'macro')
print('Precision:', round(p, 2))
print('Recall:', round(r, 2))
print('F1-score:', round(f, 2))

#Confusion Matrix
matrix = pd.DataFrame(columns = ['True' + ' ' + str(i) for i in range(3)], index = ['Pred' + ' ' + str(i) for i in range(3)], data = 0)

for i, j in zip(predictions, testy):
  matrix.loc['Pred' + ' ' + str(i), 'True' + ' ' + str(j)] += 1

df1 = matrix.copy()
for i in df1.index:
  for j in df1.columns:
    df1.loc[i, j] =  df1.loc[i, j]/matrix.sum()[j]

sns.heatmap(data = df1, annot = matrix, fmt = 'g', cmap = 'Blues')